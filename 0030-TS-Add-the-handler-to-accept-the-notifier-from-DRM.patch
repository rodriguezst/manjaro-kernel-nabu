From 34081f60996ff88a36bef9e4932c26c020e9c6da Mon Sep 17 00:00:00 2001
From: maverick <maverick_jia@sina.com>
Date: Tue, 12 Dec 2023 05:53:43 +0800
Subject: [PATCH 30/44] TS: Add the handler to accept the notifier from DRM

---
 drivers/input/touchscreen/nt36523/nt36xxx.c | 61 +++++++++++++++++++++
 drivers/input/touchscreen/nt36523/nt36xxx.h |  4 ++
 2 files changed, 65 insertions(+)

diff --git a/drivers/input/touchscreen/nt36523/nt36xxx.c b/drivers/input/touchscreen/nt36523/nt36xxx.c
index 938b49874..5a161598d 100644
--- a/drivers/input/touchscreen/nt36523/nt36xxx.c
+++ b/drivers/input/touchscreen/nt36523/nt36xxx.c
@@ -27,6 +27,10 @@
 #include <linux/of_gpio.h>
 #include <linux/of_irq.h>
 
+#ifdef CONFIG_DRM
+#include <drm/drm_notifier.h>
+#endif
+
 #include "nt36xxx.h"
 
 #if NVT_TOUCH_ESD_PROTECT
@@ -48,6 +52,10 @@ static struct workqueue_struct *nvt_fwu_wq;
 extern void Boot_Update_Firmware(struct work_struct *work);
 #endif
 
+#ifdef CONFIG_DRM
+static int nvt_drm_notifier_callback(struct notifier_block *self, unsigned long event, void *data);
+#endif
+
 static int32_t nvt_ts_suspend(struct device *dev);
 static int32_t nvt_ts_resume(struct device *dev);
 
@@ -1507,6 +1515,15 @@ static int32_t nvt_ts_probe(struct spi_device *client)
 	INIT_WORK(&ts->resume_work, nvt_resume_work);
 	INIT_WORK(&ts->suspend_work, nvt_suspend_work);
 
+#ifdef CONFIG_DRM
+	ts->drm_notif.notifier_call = nvt_drm_notifier_callback;
+	ret = mi_drm_register_client(&ts->drm_notif);
+	if(ret) {
+		NVT_ERR("register drm_notifier failed. ret=%d\n", ret);
+		goto err_register_drm_notif_failed;
+	}
+#endif
+
 	bTouchIsAwake = 1;
 	NVT_LOG("end\n");
 
@@ -1514,6 +1531,12 @@ static int32_t nvt_ts_probe(struct spi_device *client)
 
 	return 0;
 
+#ifdef CONFIG_DRM
+	if (mi_drm_unregister_client(&ts->drm_notif))
+		NVT_ERR("Error occurred while unregistering drm_notifier.\n");
+err_register_drm_notif_failed:
+#endif
+
 err_alloc_work_thread_failed:
 
 #if NVT_TOUCH_ESD_PROTECT
@@ -1591,6 +1614,11 @@ static void nvt_ts_remove(struct spi_device *client)
 {
 	NVT_LOG("Removing driver...\n");
 
+#ifdef CONFIG_DRM
+	if (mi_drm_unregister_client(&ts->drm_notif))
+		NVT_ERR("Error occurred while unregistering drm_notifier.\n");
+#endif
+
 #if NVT_TOUCH_ESD_PROTECT
 	if (nvt_esd_check_wq) {
 		cancel_delayed_work_sync(&nvt_esd_check_work);
@@ -1642,6 +1670,11 @@ static void nvt_ts_shutdown(struct spi_device *client)
 
 	nvt_irq_enable(false);
 
+#ifdef CONFIG_DRM
+	if (mi_drm_unregister_client(&ts->drm_notif))
+		NVT_ERR("Error occurred while unregistering drm_notifier.\n");
+#endif
+
 	destroy_workqueue(ts->event_wq);
 
 #if NVT_TOUCH_ESD_PROTECT
@@ -1822,6 +1855,34 @@ static int32_t nvt_ts_resume(struct device *dev)
 	return 0;
 }
 
+
+#ifdef CONFIG_DRM
+static int nvt_drm_notifier_callback(struct notifier_block *self, unsigned long event, void *data)
+{
+	int blank = *(enum drm_notifier_data *)data;
+	struct nvt_ts_data *ts_data =
+		container_of(self, struct nvt_ts_data, drm_notif);
+
+	if (data && ts_data) {
+		if (event == MI_DRM_EARLY_EVENT_BLANK) {
+			if (blank == MI_DRM_BLANK_POWERDOWN) {
+				NVT_LOG("event=%lu, *blank=%d\n", event, blank);
+				flush_workqueue(ts_data->event_wq);
+				queue_work(ts_data->event_wq, &ts_data->suspend_work);
+			}
+		} else if (event == MI_DRM_EVENT_BLANK) {
+			if (blank == MI_DRM_BLANK_UNBLANK) {
+				NVT_LOG("event=%lu, *blank=%d\n", event, blank);
+				flush_workqueue(ts_data->event_wq);
+				queue_work(ts_data->event_wq, &ts_data->resume_work);
+			}
+		}
+	}
+
+	return 0;
+}
+#endif
+
 static int nvt_pm_suspend(struct device *dev)
 {
 	if (device_may_wakeup(dev) && ts->db_wakeup) {
diff --git a/drivers/input/touchscreen/nt36523/nt36xxx.h b/drivers/input/touchscreen/nt36523/nt36xxx.h
index a19f07291..b8d569c21 100644
--- a/drivers/input/touchscreen/nt36523/nt36xxx.h
+++ b/drivers/input/touchscreen/nt36523/nt36xxx.h
@@ -120,7 +120,11 @@ struct nvt_ts_data {
 	uint16_t addr;
 	int8_t phys[32];
 #if defined(CONFIG_FB)
+#ifdef CONFIG_DRM
+	struct notifier_block drm_notif;
+#else
 	struct notifier_block fb_notif;
+#endif
 #endif
 	uint32_t config_array_size;
 	struct nvt_config_info *config_array;
-- 
2.46.2

